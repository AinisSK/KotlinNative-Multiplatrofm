apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'

def cInteropFirestorePath = "../CommonAll/src/iOSMain/c_interop/firestore/"

kotlin {

    targets {

        fromPreset(presets.jvm, 'android')

        def workingDir = buildscript.sourceFile.getParent()
        fromPreset(presets.iosX64, 'iOS') {

            binaries {
                framework {
                    linkerOpts '-rpath', '@executable_path/Frameworks'
                    linkerOpts "-F${workingDir}"
                    linkerOpts "-F${cInteropFirestorePath}"
                }
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation project(':CommonAll')

                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                api "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"

                implementation "io.ktor:ktor-client-core:$ktor_version"
                implementation "io.ktor:ktor-client-json:$ktor_version"
                implementation "io.ktor:ktor-client-logging:$ktor_version"
            }
        }
        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
            }
        }

        androidMain {
            dependsOn commonMain
            dependencies {
                implementation project(':CommonAll')

                implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"

                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"

                implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-logging-jvm:$ktor_version"
            }
        }
        androidTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }

        iOSMain {
            dependsOn commonMain
            dependencies {
                implementation project(':CommonAll')

                api "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"

                implementation "io.ktor:ktor-client-ios:$ktor_version"
                implementation "io.ktor:ktor-client-core-native:$ktor_version"
                implementation "io.ktor:ktor-client-json-native:$ktor_version"
                implementation "io.ktor:ktor-client-logging-native:$ktor_version"
            }
        }
    }
}

// Fix ambigous configuration for dependencies
kotlin.targets.matching { it.platformType.name == 'native' }.all {
    compilations.all {
        cinterops.all {
            configurations[dependencyConfigurationName].attributes.attribute(
                    Usage.USAGE_ATTRIBUTE,
                    objects.named(Usage, 'kotlin-api')
            )
        }
    }
}

task listConfigs {
    doLast {
        configurations.iOSMainImplementation.each { println it.name }
    }
}

task serializationRefToLocalModule << {

    def serialization = 'kotlinx-serialization-runtime-js'

    ant.replaceregexp(match: "$serialization", replace: "../../$serialization-0.9.0/$serialization", flags: 'g', byline: true) {
        fileset(dir: "$firebaseFunctionsMain", includes: kotlinJsOutputFile)
    }
}

configurations {
    compileClasspath
}

linkTestDebugExecutableIOS.enabled = false
compileKotlinMetadata.enabled = false