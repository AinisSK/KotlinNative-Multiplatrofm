apply plugin: 'kotlin-multiplatform'
//apply plugin: 'kotlinx-serialization'
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'

configurations {
    compileClasspath
}

buildscript {
    repositories {
        jcenter()
        google()
        maven { url 'https://jitpack.io' }
        maven { url "http://kotlin.bintray.com/kotlin-dev" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
androidExtensions {
    experimental = true
}

android {
    compileSdkVersion 28

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

def kotlin2jsOutputPath = "build/outputs/kotlin2js"

kotlin {
    targets {
        fromPreset(presets.js, 'js') {
            compileKotlinJs.kotlinOptions {
                moduleKind = "commonjs"
                outputFile = "$kotlin2jsOutputPath/index.js"
                metaInfo = true
                sourceMap = true
            }
        }
        fromPreset(presets.android, 'android')
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
//                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
            }
        }
        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
            }
        }
        jsMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$coroutines_version"
            }
        }
        jsTest {

        }

        androidMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
                implementation 'com.google.firebase:firebase-firestore:17.1.0'
                implementation 'com.github.brotoo25:firestore-coroutines:0.0.4'
                implementation "com.android.support:recyclerview-v7:28.0.0"
                implementation 'com.android.support.constraint:constraint-layout:1.1.3'
                implementation "com.android.support:cardview-v7:28.0.0"
                implementation "com.android.support:design:28.0.0"
//                implementation "org.jetbrains.anko:anko-commons:0.10.7"
//                implementation "org.jetbrains.anko:anko:0.10.7"
//                implementation "org.jetbrains.anko:anko-sdk25:0.10.7" // sdk15, sdk19, sdk21, sdk23 are also available
//                implementation "org.jetbrains.anko:anko-appcompat-v7:0.10.7"

//                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
            }
        }

        androidTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
    }
}
def functionsPath = "${rootDir}/common/firebase/functions/kotlin2js"


task coroutinesToLocalModule << {
    ant.replaceregexp(match: "'kotlinx-coroutines-core'", replace: "'./kotlinx-coroutines-core'", flags: 'g', byline: true) {
        fileset(dir: "$functionsPath", includes: 'index.js')
    }
}

task copyCommonJsFirebaseModules(type: Copy) {
    from "${rootDir}/common/$kotlin2jsOutputPath"
    into functionsPath
}

task firebaseDeployDebug(type: Exec) {
    workingDir './firebase'
    commandLine 'firebase' , 'use', 'debug'
    commandLine 'firebase' , 'deploy'
}

firebaseDeployDebug.dependsOn(coroutinesToLocalModule)
coroutinesToLocalModule.dependsOn(copyCommonJsFirebaseModules)
copyCommonJsFirebaseModules.dependsOn(compileKotlinJs)
