apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'

//def kotlinJsOutputFile = "common-all.js"
//def firebaseFunctionsPath = "../firebase/functions/src"
//def firebaseFunctionsMain = firebaseFunctionsPath + '/main'
//def firebaseFunctionsTest = firebaseFunctionsPath + '/test'
def cInteropFirestorePath = "src/iOSMain/c_interop/firestore/"

project.ext.react = [
        nodeExecutableAndArgs : ["/usr/local/bin/node"]
]

kotlin {

    targets {

        fromPreset(presets.jvm, 'android')

        fromPreset(presets.js, 'js') {

            compileTestKotlinJs.kotlinOptions {
                moduleKind = "umd"
                metaInfo = true
                sourceMap = true
            }

            compileKotlinJs.kotlinOptions {
                moduleKind = "umd"
                metaInfo = true
                sourceMap = true
            }
        }

        def workingDir = buildscript.sourceFile.getParent()
        fromPreset(presets.iosX64, 'iOS') {

            binaries {
                framework {
                    linkerOpts '-rpath', '@executable_path/Frameworks'
                    linkerOpts "-F${workingDir}"
                    linkerOpts "-F${cInteropFirestorePath}"
                }
            }
        }

        configure([iOS]) {
            compilations.main {
                cinterops {
                    firestore {
                        packageName 'com.firebase.firestore'
                        defFile = file("${cInteropFirestorePath}FirebaseFirestore.def")
                        includeDirs "${cInteropFirestorePath}/FirebaseFirestore.framework/Headers"
                    }
                }
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                api "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"

                implementation "io.ktor:ktor-client-core:$ktor_version"
                implementation "io.ktor:ktor-client-json:$ktor_version"
                implementation "io.ktor:ktor-client-logging:$ktor_version"
            }
        }
        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
            }
        }
        jsMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
            }

            compileKotlinJs {
                kotlinOptions.metaInfo = true
                kotlinOptions.sourceMap = true
                kotlinOptions.suppressWarnings = true
                kotlinOptions.verbose = true
                kotlinOptions.main = "call"
                kotlinOptions.moduleKind = "umd"
            }
        }
        jsTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-js"
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
//                implementation "org.jetbrains.kotlin:kotlin-test-annotations"

            }
        }

        androidMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"

                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"

                implementation 'com.jakewharton.timber:timber:4.7.1'

                implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-logging-jvm:$ktor_version"
            }
        }
        androidTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }

        iOSMain {
            dependencies {
                api "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"

                implementation "io.ktor:ktor-client-ios:$ktor_version"
                implementation "io.ktor:ktor-client-core-native:$ktor_version"
                implementation "io.ktor:ktor-client-json-native:$ktor_version"
                implementation "io.ktor:ktor-client-logging-native:$ktor_version"
            }
        }
    }
}

// Fix ambigous configuration for dependencies
kotlin.targets.matching { it.platformType.name == 'native' }.all {
    compilations.all {
        cinterops.all {
            configurations[dependencyConfigurationName].attributes.attribute(
                    Usage.USAGE_ATTRIBUTE,
                    objects.named(Usage, 'kotlin-api')
            )
        }
    }
}

task listConfigs {
    doLast {
        configurations.iOSMainImplementation.each { println it.name }
    }
}

clean.doFirst {
    delete "${rootDir}/firebase/functions/src"
}

//task copyCommonJsFirebaseModules(type: Copy) {
//    from compileKotlinJs.destinationDir
//    into firebaseFunctionsMain
//}
//
//task copyCompileTestKotlinJsToFirebase(type: Copy) {
//    from compileTestKotlinJs.destinationDir
//    into firebaseFunctionsTest
//}

task firebaseDeploy(type: Exec) {
    workingDir '../firebase'
    commandLine 'firebase', 'deploy'
}

task firebaseTest(type: Exec) {
    workingDir '../firebase/functions'
    commandLine 'npm', 'test'
}

task firebaseDeployLocaly(type: Exec) {
    workingDir '../firebase'
    commandLine 'firebase', 'functions:shell'
}

task serializationRefToLocalModule << {

    def serialization = 'kotlinx-serialization-runtime-js'

    ant.replaceregexp(match: "$serialization", replace: "../../$serialization-0.9.0/$serialization", flags: 'g', byline: true) {
        fileset(dir: "$firebaseFunctionsMain", includes: kotlinJsOutputFile)
    }
}

//firebaseTest
//firebaseTest.dependsOn(copyCompileTestKotlinJsToFirebase)
//copyCompileTestKotlinJsToFirebase.dependsOn(compileTestKotlinJs)
////
//
////firebaseDeploy
//firebaseDeploy.dependsOn(serializationRefToLocalModule)
//serializationRefToLocalModule.dependsOn(copyCommonJsFirebaseModules)
//copyCommonJsFirebaseModules.dependsOn(compileKotlinJs)
//
configurations {
    compileClasspath
}

linkTestDebugExecutableIOS.enabled = false
compileKotlinMetadata.enabled = false